<?php

namespace app\models\amop\models;

use shakura\yii2\gearman\JobWorkload;
use Yii;
use yii\caching\Cache;

/**
 * This is the model class for table "project".
 *
 * @property integer $id
 * @property string $date_create
 * @property string $date_update
 * @property string $title
 * @property integer $staff_id
 * @property string $description
 * @property string $secret_key
 */
class Project extends \yii\db\ActiveRecord
{

    /**
     * @var Cache|string the cache object or the ID of the cache application component that
     * is used to cache the table metadata.
     * @see enableSchemaCache
     */
    public $schemaCache = 'cache';



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'project';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['date_create', 'date_update'], 'safe'],
            [['title', 'staff_id'], 'required', 'message' => 'Заполните обязательные поля'],
            [['date_create', 'date_update'], 'date', 'format' => 'yyyy-MM-dd H:m:s'],
            [['title', 'description'], 'string', 'message' => 'Введите верное значение'],
            [['staff_id'], 'integer'],
            [['secret_key'], 'string', 'max' => 30, 'tooLong' => 'Максимальная длина 30 символов'],
        ];
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStaff() {
        return $this->hasOne(User::className(), ['id' => 'staff_id']);
    }

    /**
     * This method is invoked before deleting a record.
     * The default implementation raises the [[EVENT_BEFORE_DELETE]] event.
     * When overriding this method, make sure you call the parent implementation like the following:
     *
     * ```php
     * public function beforeDelete()
     * {
     *     if (parent::beforeDelete()) {
     *         // ...custom code here...
     *         return true;
     *     } else {
     *         return false;
     *     }
     * }
     * ```
     *
     * @return boolean whether the record should be deleted. Defaults to true.
     */
    public function beforeDelete()
    {
        if (Yii::$app->{$this->schemaCache} instanceof Cache) {
            // Удаление данных кеша проектов пользователя
            Yii::$app->{$this->schemaCache}->delete(['yii\widgets\FragmentCache', "gridview:project:list:" . $this->staff_id]);
            Yii::$app->{$this->schemaCache}->delete("project:user:" . $this->staff_id);
        }

        // Создаем задачу на удаление всех данных по проекту
        $result = \Yii::$app->gearman->getDispatcher()->background('DeleteProjectData', new JobWorkload([
            'params' => [
                'data' => ['id' => $this->id]
            ]
        ]));

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    /**
     * Генерируем дату создания и обновляем дату обновления
     * @inheritDoc
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->date_create = Yii::$app->formatter->asDate('now', 'yyyy-MM-dd H:m:s');
        }

        $this->date_update = Yii::$app->formatter->asDate('now', 'yyyy-MM-dd H:m:s');

        if (Yii::$app->{$this->schemaCache} instanceof Cache) {
            // Удаление данных кеша проектов пользователя
            Yii::$app->{$this->schemaCache}->delete(['yii\widgets\FragmentCache', "gridview:project:list:" . $this->staff_id]);
            Yii::$app->{$this->schemaCache}->delete("project:user:" . $this->staff_id);
        }

        return parent::beforeSave($insert);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'date_create' => 'Date Create',
            'date_update' => 'Date Update',
            'title' => 'Название',
            'staff_id' => 'Staff ID',
            'description' => 'Описание',
            'secret_key' => 'Секретный ключ',
        ];
    }
}
