<?php
/**
 * UserTest.php
 *
 * @package app\tests\codeception\unit\models\amop\model
 * @date: 11.09.2015 19:44
 * @author: Kyshnerev Dmitriy <dimkysh@mail.ru>
 */

namespace tests\codeception\unit\models\amop\models;

use app\models\amop\models\User;
use Codeception\Specify;
use tests\codeception\unit\DbTestCase;
use tests\codeception\unit\fixtures\models\amop\models\UserFixture;

/**
 * Тест класса пользователей
 * Class UserTest
 * @package tests\codeception\unit\models\amop\models
 */
class UserTest extends DbTestCase
{
    use Specify;

    /**
     * Подключение нужных фикстур
     * @return array
     */
    public function fixtures()
    {
        return [
            'user' => UserFixture::className(),
        ];
    }

    /**
     * @Override
     */
    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
    }

    /**
     * @Override
     */
    protected function _after()
    {
        parent::_after(); // TODO: Change the autogenerated stub
    }


    /**
     * Тест методов валидации
     */
    public function testValidate() {
        $model = new User();
        $this->specify('validate required', function() use ($model){
            $model->login = "";
            $model->password = "";
            $model->name = "";
            $model->surname = "";
            $model->email = "";
            $model->validate();

            $this->assertContains('Заполните обязательные поля', $model->getErrors('login'));
            $this->assertContains('Заполните обязательные поля', $model->getErrors('password'));
            $this->assertContains('Заполните обязательные поля', $model->getErrors('name'));
            $this->assertContains('Заполните обязательные поля', $model->getErrors('surname'));
            $this->assertContains('Заполните обязательные поля', $model->getErrors('email'));
        });


        $this->specify('validate retypePassword', function() use ($model){
            $model->password = "123";
            $model->retypePassword = "1234";
            $model->validate();

            $this->assertContains('Введите верный повторный пароль', $model->getErrors('retypePassword'));

            $model->password = "123";
            $model->retypePassword = "123";
            $model->validate();

            $this->assertNotContains('Введите верный повторный пароль', $model->getErrors('retypePassword'));
        });


        $this->specify('validate login', function() use ($model) {
            $model->login = $this->getFixture('user')->getModel('user1')->login;
            $model->validate();

            $this->assertContains('Пользователь с таким логином существует', $model->getErrors('login'));

            $model->login = '123';
            $model->validate();

            $this->assertNotContains('Пользователь с таким логином существует', $model->getErrors('login'));
        });

        $this->specify('validate latin words', function() use ($model) {
            $model->login = "вв";
            $model->retypePassword = "вв";
            $model->password = "вв";
            $model->validate();

            $this->assertContains('Поле должно содержать латинские буквы или цифры.', $model->getErrors('login'));
            $this->assertContains('Поле должно содержать латинские буквы или цифры.', $model->getErrors('password'));
            $this->assertContains('Поле должно содержать латинские буквы или цифры.', $model->getErrors('retypePassword'));

            $model->login = '123';
            $model->retypePassword = "123";
            $model->password = "123";
            $model->validate();

            $this->assertNotContains('Поле должно содержать латинские буквы или цифры.', $model->getErrors('login'));
            $this->assertNotContains('Поле должно содержать латинские буквы или цифры.', $model->getErrors('password'));
            $this->assertNotContains('Поле должно содержать латинские буквы или цифры.', $model->getErrors('retypePassword'));
        });

        $this->specify('validate words', function() use ($model) {
            $model->name = "123";
            $model->surname = "123";
            $model->validate();

            $this->assertContains('Поле должно содержать только буквы.', $model->getErrors('name'));
            $this->assertContains('Поле должно содержать только буквы.', $model->getErrors('surname'));

            $model->name = 'ss';
            $model->surname = "ss";
            $model->validate();

            $this->assertNotContains('Поле должно содержать только буквы.', $model->getErrors('name'));
            $this->assertNotContains('Поле должно содержать только буквы.', $model->getErrors('surname'));
        });
    }


    /**
     * Валидация пароля
     */
    public function testValidatePassword() {
        $user = $this->getFixture('user')->getModel("user1");

        $this->assertTrue($user->validatePassword('dm1989'), 'Ошибка в методе валидации пароля');
    }

    /**
     * Получение identity пользователя
     */
    public function testFindIdentity() {
        $user = $this->getFixture('user')->getModel("user1");

        $staff = User::findIdentity($user->id);

        $this->assertEquals($user->id, $staff->id, 'Ошибка в методе получения identity');

    }

    /**
     * Валидация auth_key
     */
    public function testValidateAuthKey() {
        $user = $this->getFixture('user')->getModel("user1");

        $this->assertTrue($user->validateAuthKey('test'), 'Ошибка в методе валидации auth_key');
    }


}