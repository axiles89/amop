<?php
/**
 * GetProfilerListTest.php
 *
 * @package tests\codeception\unit\models\amop\models\ListProfiler
 * @date: 22.10.2015 17:24
 * @author: Kyshnerev Dmitriy <dimkysh@mail.ru>
 */

namespace tests\codeception\unit\models\amop\models\ListProfiler;

use app\models\amop\models\ListProfiler\command\GetProfilerList;
use Codeception\Specify;
use tests\codeception\unit\fixtures\models\amop\models\ListProfiler\GetProfilerListFixture;
use yii\codeception\TestCase;
use yii\helpers\Json;

/**
 * Тест команды получения профайлеров по проектам для меню
 * Class GetProfilerListTest
 * @package tests\codeception\unit\models\amop\models\ListProfiler
 */
class GetProfilerListTest extends TestCase
{
    use Specify;

    /**
     * @return array
     */
    public function fixtures()
    {
        return [
            'list' => GetProfilerListFixture::className(),
        ];
    }

    /**
     * @Override
     */
    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
    }

    /**
     * @Override
     */
    protected function _after()
    {
        parent::_after(); // TODO: Change the autogenerated stub
    }

    /**
     * Тестирование проверки обязательных параметров
     */
    public function testException() {
        $this->setExpectedException('BadFunctionCallException');
        $command = new GetProfilerList();
        $command->execute();
    }

    /**
     * Тестирование выполнения команды
     */
    public function testExecute() {

        $fixture = $this->getFixture('list')->data;

        $this->specifyConfig()
            ->cloneOnly('components');

        $redisMock = $this->getMockBuilder('\yii\redis\Connection')->setMethods(['hexists', 'hget', 'multi', 'exec', 'hset', 'expire'])->getMock();
        $redisMock->expects($this->any())->method('multi')->will($this->returnValue(1));
        $redisMock->expects($this->any())->method('exec')->will($this->returnValue(1));
        $redisMock->expects($this->any())->method('hset')->will($this->returnValue(1));
        $redisMock->expects($this->any())->method('expire')->will($this->returnValue(1));

        $this->specify('test get from cache', function() use ($redisMock, $fixture){

            $redisMock->expects($this->any())->method('hexists')->will($this->returnValue(1));
            $redisMock->expects($this->any())->method('hget')->will($this->returnValue(Json::encode($fixture)));
            \Yii::$app->set('redis', $redisMock);

            $command = new GetProfilerList();
            $command->setClassModel('app\models\amop\models\ListProfiler');
            $result = $command->setData([0])->execute();

            $this->assertSame($result, $fixture, 'test get from cache failed');
        });
    }
}