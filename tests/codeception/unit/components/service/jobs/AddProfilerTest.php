<?php
/**
 * AddProfilerTest.php
 *
 * @package tests\codeception\unit\components\service\jobs
 * @date: 01.10.2015 20:58
 * @author: Kyshnerev Dmitriy <dimkysh@mail.ru>
 */

namespace tests\codeception\unit\components\service\jobs;

use app\components\service\jobs\AddProfiler;
use Codeception\Util\Stub;
use GearmanJob;
use Codeception\Specify;
use shakura\yii2\gearman\JobWorkload;
use tests\codeception\unit\fixtures\models\amop\models\ListProfilerFixture;
use yii\codeception\TestCase;

/**
 * Class AddProfilerTest
 * @package tests\codeception\unit\components\service\jobs
 */
class AddProfilerTest extends TestCase
{
    use Specify;

    /**
     * @Override
     */
    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
    }

    /**
     * @Override
     */
    protected function _after()
    {
        parent::_after(); // TODO: Change the autogenerated stub
    }

    /**
     * Declares the fixtures that are needed by the current test case.
     * The return value of this method must be an array of fixture configurations. For example,
     *
     * ```php
     * [
     *     // anonymous fixture
     *     PostFixture::className(),
     *     // "users" fixture
     *     'users' => UserFixture::className(),
     *     // "cache" fixture with configuration
     *     'cache' => [
     *          'class' => CacheFixture::className(),
     *          'host' => 'xxx',
     *     ],
     * ]
     * ```
     *
     * Note that the actual fixtures used for a test case will include both [[globalFixtures()]]
     * and [[fixtures()]].
     *
     * @return array the fixtures needed by the current test case
     */
    public function fixtures()
    {
        return [
            'list' => ListProfilerFixture::className(),
        ];
    }


    /**
     * Тестирование выполнения job
     */
    public function testExecute() {

        $workLoad = new JobWorkload();
        $obj = new \stdClass();

        $jobMock = $this->getMockBuilder('GearmanJob')->setMethods(['workload'])->getMock();
        $jobMock->expects($this->any())->method('workload')->will($this->returnCallback(function() use ($workLoad, $obj){

            $obj->type = 13333;
            $obj->date_create = date('d.m.Y');
            $obj->project_id = 11;
            $obj->message = 'test';
            $obj->duration = 12;
            $obj->time_start = 12;
            $obj->time_end = 12;

            $data = [
                'data' => $obj
            ];

            $workLoad->setParams($data);
            return serialize($workLoad);
        }));

        $jobBase = new AddProfiler();
        $result = $jobBase->execute($jobMock);

        $this->assertFalse($result, 'AddProfiler job is broken!');
    }
}